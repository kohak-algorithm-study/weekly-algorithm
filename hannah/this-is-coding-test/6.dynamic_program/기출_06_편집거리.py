'''
두 개의 문자열 A와 B가 주어졌을 때, 문자열 A를 편집하여 문자열 B로 만들고자 합니다.
문자열 A를 편집할 때는 다음의 세 연산 중에서 한 번에 하나씩 선택하여 이용할 수 있습니다.
1. 삽입 (Insert): 특정한 위치에 하나의 문자를 삽입합니다.
2. 삭제 (Remove): 특정한 위치에 있는 하나의 문자를 삭제합니다.
3. 교체 (Replace): 특정한 위치에 있는 하나의 문자를 다른문자로 교체합니다.
이때 편집 거리란 문자열 A를 편집하여 문자열 B로 만들기 위해 사용한 연산의 수를 의미합니다.
문자열 A를 문자열 B로 만드는 최소 편집 거리를 계산하는 프로그램을 작성하세요.
예를 들어 “sunday”와 “saturday”의 최소 편집 거리는 3입니다.

[입력 조건]
• 두 문자열 A와 B가 한 줄에하나씩 주어집니다.
• 각 문자열은 영문 알파벳으로만 구성되어 있으며, 각 문자열의 길이는 1보다 크거나 같고, 5,000보다 작거나 같습니다.

[출력 조건]
• 최소 편집 거리를 출력합니다

[입력 예시1]
cat
cut
[출력 예시1]
1

[입력 예시2]
sunday
saturday
[출력 예시2]
3
'''
a = input()
b = input()
n = len(a)
m = len(b)
dp = [[0] * (m + 1) for _ in range(n + 1)]  # dp[i][j]: a글자의 i번째까지의 글자를 b글자의 j번째 글자로 만들기 위한 최소비용을 의미

# dp테이블 초기화(첫번째 열과 행의 값은 한 글자를 계속 추가/삭제 하는 것 뿐이므로 이전 칸에서 1씩 증가)
for i in range(1, n + 1):
    dp[i][0] = i

for j in range(1, m + 1):
    dp[0][j] = j

for i in range(1, n + 1):
    for j in range(1, m + 1):
        if a[i - 1] == b[j - 1]:  # 문자가 같으면 작업할게 없기 때문에 왼쪽 위에 있는 값을 그대로 저장
            dp[i][j] = dp[i - 1][j - 1]
        else:  # 문자가 다르면 추가, 삭제, 교체 작업 중 비용이 작은 것으로
            insert = dp[i][j - 1] + 1  # 추가는 이전 값 + 1이므로 왼쪽 값 +1
            delete = dp[i - 1][j] + 1  # 삭제는 이 글자가 없다고 가정하는 것이기 때문에 이 글자가 없는 위쪽 값을 가져와서 +1
            replace = dp[i - 1][j - 1] + 1  # 교체는 추가+삭제 작업이므로 왼쪽 위의 값을 가져와서 +1
            dp[i][j] = min(insert, delete, replace)

print(dp[n][m])
